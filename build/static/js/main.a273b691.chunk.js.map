{"version":3,"sources":["Staff/Staff.js","Staff/EditStaff.js","Staff/AddStaff.js","MyClasses/Clock.js","App.js","registerServiceWorker.js","index.js"],"names":["staff","props","className","name","email","children","onClick","editEvent","EditStaff","state","ev","console","info","target","value","this","setState","updateEvent","arIndex","deleteEvent","type","id","onChange","changeName","changeEmail","updateParent","deleteParent","React","Component","AddStaff","addEvent","addParent","Clock","date","Date","timerID","setInterval","tick","clearInterval","toLocaleTimeString","App","setCurrentStaffNum","newVal","currentStaffNum","updateStaff","updateData","dir","tempStaffAr","staffMembers","addStaff","addData","push","deleteStaff","splice","fetch","then","resp","json","myData","editBox","myEv","staffAr","map","obj","i","Staff","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gOAkBeA,G,MAhBD,SAACC,GACX,OACI,yBAAKC,UAAU,QACX,qCACA,oCAAUD,EAAME,MAChB,qCAAWF,EAAMG,OACjB,2BAAIH,EAAMI,UACV,6BACI,4BAAQH,UAAU,WAAWI,QAASL,EAAMM,WAA5C,SAEJ,iCCqDKC,E,kDA/Db,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CACTN,KAAMF,EAAME,KACZC,MAAOH,EAAMG,OAJA,E,uDAQRM,GACPC,QAAQC,KAAKF,EAAGG,OAAOC,OACvBC,KAAKC,SACD,CAACb,KAAMO,EAAGG,OAAOC,U,kCAIZJ,GACTC,QAAQC,KAAKF,EAAGG,OAAOC,OACvBC,KAAKC,SACD,CAACZ,MAAOM,EAAGG,OAAOC,U,qCAKpBC,KAAKd,MAAMgB,YACT,CACIC,QAASH,KAAKd,MAAMiB,QACpBf,KAAMY,KAAKN,MAAMN,KACjBC,MAAOW,KAAKN,MAAML,U,qCAM1BW,KAAKd,MAAMkB,YACP,CACID,QAASH,KAAKd,MAAMiB,Y,+BAKtB,IAAD,OACP,OACE,yBAAKhB,UAAU,aACX,0CACA,6BACI,6CACA,2BAAOkB,KAAK,OAAOC,GAAG,YAAYP,MAAOC,KAAKN,MAAMN,KAAMmB,SAAU,SAACZ,GAAD,OAAQ,EAAKa,WAAWb,OAEhG,6BACI,8CACA,2BAAOU,KAAK,OAAOC,GAAG,aAAaP,MAAOC,KAAKN,MAAML,MAAOkB,SAAU,SAACZ,GAAD,OAAQ,EAAKc,YAAYd,OAEnG,6BACI,4BAAQR,UAAU,WAAWI,QAAS,SAACI,GAAD,OAAQ,EAAKe,iBAAnD,WAEJ,6BACI,4BAAQvB,UAAU,UAAUI,QAAS,SAACI,GAAD,OAAQ,EAAKgB,iBAAlD,gB,GAzDQC,IAAMC,WC4DfC,E,kDA1DX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CACTN,KAAM,GACNC,MAAO,IAJI,E,uDAQRM,GACPC,QAAQC,KAAKF,EAAGG,OAAOC,OACvBC,KAAKC,SACD,CAAEb,KAAMO,EAAGG,OAAOC,U,kCAIdJ,GACRC,QAAQC,KAAKF,EAAGG,OAAOC,OACvBC,KAAKC,SACD,CAAEZ,MAAOM,EAAGG,OAAOC,U,kCAKvBC,KAAKd,MAAM6B,SACP,CACI3B,KAAMY,KAAKN,MAAMN,KACjBC,MAAOW,KAAKN,MAAML,QAI1BW,KAAKC,SACD,CACIb,KAAM,GACNC,MAAO,O,+BAKT,IAAD,OACL,OACI,yBAAKF,UAAU,YACX,yCACA,6BACI,6CACA,2BAAOkB,KAAK,OAAOC,GAAG,YAAYP,MAAOC,KAAKN,MAAMN,KAAMmB,SAAU,SAACZ,GAAD,OAAQ,EAAKa,WAAWb,OAEhG,6BACI,8CACA,2BAAOU,KAAK,OAAOC,GAAG,aAAaP,MAAOC,KAAKN,MAAML,MAAOkB,SAAU,SAACZ,GAAD,OAAQ,EAAKc,YAAYd,OAEnG,6BACA,4BAAQR,UAAU,UAAUI,QAAS,SAACI,GAAD,OAAQ,EAAKqB,cAAlD,a,GArDOJ,IAAMC,WCgCZI,E,kDA/Bb,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CAACwB,KAAM,IAAIC,MAFT,E,gEAKI,IAAD,OAClBnB,KAAKoB,QAAUC,aACb,kBAAM,EAAKC,SACX,O,6CAKFC,cAAcvB,KAAKoB,W,6BAInBpB,KAAKC,SAAS,CACZiB,KAAM,IAAIC,S,+BAKZ,OACE,6BACE,4BAAKnB,KAAKN,MAAMwB,KAAKM,2B,GA1BbZ,IAAMC,WCmIXY,E,kDA3Hb,aAAe,IAAD,8BACZ,gBAkCFC,mBAAqB,SAACC,GACpB,EAAK1B,SAAS,CACZ2B,gBAAiBD,KArCP,EA0CdE,YAAc,SAACC,GACblC,QAAQmC,IAAID,GACZ,IAAIE,EAAc,EAAKtC,MAAMuC,aAC7BrC,QAAQmC,IAAIC,EAAYF,EAAW3B,UACnC6B,EAAYF,EAAW3B,SAAW,CAChCf,KAAM0C,EAAW1C,KACjBC,MAAOyC,EAAWzC,OAEpB,EAAKY,SAAS,CACZ2B,gBAAkB,KAClBK,aAAeD,KApDL,EAwDdE,SAAW,SAACC,GACVvC,QAAQmC,IAAII,GACZ,IAAIH,EAAc,EAAKtC,MAAMuC,aAC7BD,EAAYI,KAAKD,GACjB,EAAKlC,SAAS,CACZ2B,gBAAkB,KAClBK,aAAeD,KA9DL,EAkEdK,YAAc,SAACP,GACblC,QAAQmC,IAAID,GACZ,IAAIE,EAAc,EAAKtC,MAAMuC,aAC7BrC,QAAQmC,IAAIC,EAAYF,EAAW3B,UACnC6B,EAAYM,OAAOR,EAAW3B,QAAS,GACvC,EAAKF,SAAS,CACZ2B,gBAAkB,KAClBK,aAAeD,KAvEjB,EAAKtC,MAAQ,CACXkC,gBAAkB,KAClBK,aAAc,IAJJ,E,gEAmBM,IAAD,OACjBM,MAAM,qBACLC,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAG,GACJ/C,QAAQmC,IAAIY,GACZ,EAAK1C,SACH,CACEgC,aAAeU,S,+BAmDrB,IAAIC,EACAC,EAAO7C,KAAK0B,mBAEdkB,EADgC,OAA/B5C,KAAKN,MAAMkC,gBACF,wCAGV,kBAAC,EAAD,CACAxC,KAAMY,KAAKN,MAAMuC,aAAajC,KAAKN,MAAMkC,iBAAiBxC,KAC1De,QAASH,KAAKN,MAAMkC,gBACpBvC,MAAOW,KAAKN,MAAMuC,aAAajC,KAAKN,MAAMkC,iBAAiBvC,MAC3Da,YAAaF,KAAK6B,YAClBzB,YAAaJ,KAAKqC,cAIpB,IAAIS,EAAU9C,KAAKN,MAAMuC,aAAac,KAAI,SAASC,EAAKC,GACtD,OAAO,kBAACC,EAAD,CAAOC,IAAKF,EAAG7D,KAAM4D,EAAI5D,KAAMC,MAAO2D,EAAI3D,MAAOG,UAAW,SAACG,GAAD,OAAQkD,EAAKI,KAAzE,mBAIT,OACE,yBAAK9D,UAAU,OACb,gCACE,4CACA,6BACE,kBAAC,EAAD,QAGJ,8BACE,yBAAKA,UAAU,aACd2D,GAED,yBAAK3D,UAAU,WACZyD,EACD,6BACA,kBAAC,EAAD,CAAU7B,SAAUf,KAAKkC,mB,GApHnBrB,aCGZuC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvE,QACfkE,UAAUC,cAAcO,WAK1BxE,QAAQyE,IAAI,6CAKZzE,QAAQyE,IAAI,4CAMrBC,OAAM,SAAAC,GACL3E,QAAQ2E,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,GAAN,sBAEPzB,IAiDV,SAAiCO,GAE/BpB,MAAMoB,GACHnB,MAAK,SAAAwC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM7C,MAAK,SAAAuB,GACjCA,EAAauB,aAAa9C,MAAK,WAC7Bc,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBW,OAAM,WACL1E,QAAQyE,IACN,oEArEAmB,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAM7C,MAAK,WACjC5C,QAAQyE,IACN,gHAMJX,EAAgBC,OCzCxB8B,K","file":"static/js/main.a273b691.chunk.js","sourcesContent":["import React from 'react';\n\nconst staff = (props) => {\n    return(\n        <div className=\"grid\">\n            <h2>Staff</h2>\n            <p>Name: {props.name}</p>\n            <p>Email: {props.email}</p>\n            <p>{props.children}</p>\n            <div>\n                <button className=\"btn edit\" onClick={props.editEvent}>Edit</button>\n            </div>\n            <div>\n            </div>\n        </div>\n    )\n}\n\nexport default staff;","import React from 'react';\nclass EditStaff extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          name: props.name,\n          email: props.email\n        };\n    }\n\n    changeName(ev) {\n        console.info(ev.target.value)\n        this.setState(\n            {name: ev.target.value}\n        )\n      }\n\n     changeEmail(ev) {\n        console.info(ev.target.value)\n        this.setState(\n            {email: ev.target.value}\n        )\n      }\n\n      updateParent(){\n          this.props.updateEvent(\n            {\n                arIndex: this.props.arIndex,\n                name: this.state.name,\n                email: this.state.email\n            }\n          );\n      }\n\n      deleteParent(){\n        this.props.deleteEvent(\n            {\n                arIndex: this.props.arIndex\n            }\n          );\n      }\n  \n    render() {\n      return (\n        <div className=\"editStaff\">\n            <h2>Edit Staff</h2>\n            <div>\n                <label>Staff Name</label>\n                <input type=\"text\" id=\"staffName\" value={this.state.name} onChange={(ev) => this.changeName(ev) }  />\n            </div>\n            <div>\n                <label>Staff Email</label>\n                <input type=\"text\" id=\"staffEmail\" value={this.state.email} onChange={(ev) => this.changeEmail(ev) }  />\n            </div>\n            <div>\n                <button className=\"btn edit\" onClick={(ev) => this.updateParent() }>Update</button>\n            </div>\n            <div>\n                <button className=\"btn del\" onClick={(ev) => this.deleteParent() }>Delete</button>\n            </div>\n        </div>\n      );\n    }\n  }\n\n  export default EditStaff;","import React from 'react';\nclass AddStaff extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            email: \"\",\n        };\n    }\n\n    changeName(ev) {\n        console.info(ev.target.value)\n        this.setState(\n            { name: ev.target.value }\n        )\n    }\n\n    changeEmail(ev) {\n        console.info(ev.target.value)\n        this.setState(\n            { email: ev.target.value }\n        )\n    }\n\n    addParent() {\n        this.props.addEvent(\n            {\n                name: this.state.name,\n                email: this.state.email\n            }\n        );\n        //reset form\n        this.setState(\n            {\n                name: \"\",\n                email: \"\"\n            }\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"addStaff\">\n                <h2>Add Staff</h2>\n                <div>\n                    <label>Staff Name</label>\n                    <input type=\"text\" id=\"staffName\" value={this.state.name} onChange={(ev) => this.changeName(ev) }  />\n                </div>\n                <div>\n                    <label>Staff Email</label>\n                    <input type=\"text\" id=\"staffEmail\" value={this.state.email} onChange={(ev) => this.changeEmail(ev) }  />\n                </div>\n                <div>\n                <button className=\"btn add\" onClick={(ev) => this.addParent()}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddStaff;","import React from 'react';\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n      }\n    \n      componentDidMount() {\n        this.timerID = setInterval(\n          () => this.tick(),\n          1000\n        );\n      }\n    \n      componentWillUnmount() {\n        clearInterval(this.timerID);\n      }\n    \n      tick() {\n        this.setState({\n          date: new Date()\n        });\n      }\n    \n      render() {\n        return (\n          <div>\n            <h2>{this.state.date.toLocaleTimeString()}</h2>\n          </div>\n        );\n      }\n    }\n\n  export default Clock;","import React, { Component } from 'react';\nimport './App.css';\nimport Staff from './Staff/Staff'\nimport EditStaff from './Staff/EditStaff'\nimport AddStaff from './Staff/AddStaff'\nimport Clock from './MyClasses/Clock'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      currentStaffNum : null,\n      staffMembers: []\n    };\n}\n\n  // Hard Coded Data - replaced by fetch\n  // state = {\n  //   currentStaffNum : null,\n  //   staffMembers: [\n  //     { name: \"Jane\", email: \"jane@company.com\" },\n  //     { name: \"Bob\", email: \"bob@company.com\" },\n  //     { name: \"Ralph\", email: \"ralph@bocompanyb.com\" }\n  //   ]\n  //   //  staffMembers: []\n  // }\n\n  componentDidMount(){\n    fetch('./data/staff.json')\n    .then(resp => {\n      return resp.json();\n    })\n    .then(myData => {\n      console.dir(myData);\n      this.setState(\n        {\n          staffMembers : myData\n        }\n      )\n    })\n  }\n\n  // needs to be an arrow function for this\n  setCurrentStaffNum = (newVal) =>  {  \n    this.setState({\n      currentStaffNum: newVal\n    })\n\n  }\n\n  updateStaff = (updateData) => {\n    console.dir(updateData);\n    let tempStaffAr = this.state.staffMembers;\n    console.dir(tempStaffAr[updateData.arIndex]);\n    tempStaffAr[updateData.arIndex] = {\n      name: updateData.name,\n      email: updateData.email,\n    }\n    this.setState({\n      currentStaffNum : null,\n      staffMembers : tempStaffAr\n    })\n  }  \n\n  addStaff = (addData) => {\n    console.dir(addData);\n    let tempStaffAr = this.state.staffMembers;\n    tempStaffAr.push(addData)\n    this.setState({\n      currentStaffNum : null,\n      staffMembers : tempStaffAr\n    })\n  }\n\n  deleteStaff = (updateData) => {\n    console.dir(updateData);\n    let tempStaffAr = this.state.staffMembers;\n    console.dir(tempStaffAr[updateData.arIndex]);\n    tempStaffAr.splice(updateData.arIndex, 1)\n    this.setState({\n      currentStaffNum : null,\n      staffMembers : tempStaffAr\n    })\n  }  \n\n  render() {\n    // render conditions\n    let editBox;\n    let myEv = this.setCurrentStaffNum;\n    if(this.state.currentStaffNum === null){\n      editBox = <div>Not Set</div>\n    }else {\n      editBox = \n      <EditStaff \n      name={this.state.staffMembers[this.state.currentStaffNum].name} \n      arIndex={this.state.currentStaffNum} \n      email={this.state.staffMembers[this.state.currentStaffNum].email} \n      updateEvent={this.updateStaff} \n      deleteEvent={this.deleteStaff} \n      />\n    }\n\n    let staffAr = this.state.staffMembers.map(function(obj, i)   {\n      return <Staff key={i} name={obj.name} email={obj.email} editEvent={(ev) => myEv(i)} >Some content</Staff>;\n    })\n\n    // now render\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>SPA - Editor</h1>\n          <div>\n            <Clock />\n          </div>\n        </header>\n        <main>\n          <div className=\"staffGrid\">\n          {staffAr}\n          </div>\n          <div className=\"sideBar\">\n            {editBox}\n            <div>\n            <AddStaff addEvent={this.addStaff} />\n            </div>\n          </div>\n      </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}